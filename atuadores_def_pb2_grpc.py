# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import atuadores_def_pb2 as atuadores__def__pb2


class SprinklerStub(object):
    """Sprinkler
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Notify = channel.unary_unary(
                '/Sprinkler/Notify',
                request_serializer=atuadores__def__pb2.Temperature.SerializeToString,
                response_deserializer=atuadores__def__pb2.SprinklerReply.FromString,
                )
        self.ActivateAlarm = channel.unary_unary(
                '/Sprinkler/ActivateAlarm',
                request_serializer=atuadores__def__pb2.Void.SerializeToString,
                response_deserializer=atuadores__def__pb2.SprinklerReply.FromString,
                )
        self.DeactivateAlarm = channel.unary_unary(
                '/Sprinkler/DeactivateAlarm',
                request_serializer=atuadores__def__pb2.Void.SerializeToString,
                response_deserializer=atuadores__def__pb2.SprinklerReply.FromString,
                )


class SprinklerServicer(object):
    """Sprinkler
    """

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActivateAlarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeactivateAlarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SprinklerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=atuadores__def__pb2.Temperature.FromString,
                    response_serializer=atuadores__def__pb2.SprinklerReply.SerializeToString,
            ),
            'ActivateAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivateAlarm,
                    request_deserializer=atuadores__def__pb2.Void.FromString,
                    response_serializer=atuadores__def__pb2.SprinklerReply.SerializeToString,
            ),
            'DeactivateAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.DeactivateAlarm,
                    request_deserializer=atuadores__def__pb2.Void.FromString,
                    response_serializer=atuadores__def__pb2.SprinklerReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sprinkler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sprinkler(object):
    """Sprinkler
    """

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sprinkler/Notify',
            atuadores__def__pb2.Temperature.SerializeToString,
            atuadores__def__pb2.SprinklerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActivateAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sprinkler/ActivateAlarm',
            atuadores__def__pb2.Void.SerializeToString,
            atuadores__def__pb2.SprinklerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeactivateAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sprinkler/DeactivateAlarm',
            atuadores__def__pb2.Void.SerializeToString,
            atuadores__def__pb2.SprinklerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LampStub(object):
    """Lamp
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Notify = channel.unary_unary(
                '/Lamp/Notify',
                request_serializer=atuadores__def__pb2.Lightness.SerializeToString,
                response_deserializer=atuadores__def__pb2.LampReply.FromString,
                )
        self.TurnOn = channel.unary_unary(
                '/Lamp/TurnOn',
                request_serializer=atuadores__def__pb2.Void.SerializeToString,
                response_deserializer=atuadores__def__pb2.LampReply.FromString,
                )
        self.TurnOff = channel.unary_unary(
                '/Lamp/TurnOff',
                request_serializer=atuadores__def__pb2.Void.SerializeToString,
                response_deserializer=atuadores__def__pb2.LampReply.FromString,
                )
        self.ChangeColor = channel.unary_unary(
                '/Lamp/ChangeColor',
                request_serializer=atuadores__def__pb2.Color.SerializeToString,
                response_deserializer=atuadores__def__pb2.LampReply.FromString,
                )


class LampServicer(object):
    """Lamp
    """

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnOn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnOff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeColor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LampServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=atuadores__def__pb2.Lightness.FromString,
                    response_serializer=atuadores__def__pb2.LampReply.SerializeToString,
            ),
            'TurnOn': grpc.unary_unary_rpc_method_handler(
                    servicer.TurnOn,
                    request_deserializer=atuadores__def__pb2.Void.FromString,
                    response_serializer=atuadores__def__pb2.LampReply.SerializeToString,
            ),
            'TurnOff': grpc.unary_unary_rpc_method_handler(
                    servicer.TurnOff,
                    request_deserializer=atuadores__def__pb2.Void.FromString,
                    response_serializer=atuadores__def__pb2.LampReply.SerializeToString,
            ),
            'ChangeColor': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeColor,
                    request_deserializer=atuadores__def__pb2.Color.FromString,
                    response_serializer=atuadores__def__pb2.LampReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Lamp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Lamp(object):
    """Lamp
    """

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lamp/Notify',
            atuadores__def__pb2.Lightness.SerializeToString,
            atuadores__def__pb2.LampReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnOn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lamp/TurnOn',
            atuadores__def__pb2.Void.SerializeToString,
            atuadores__def__pb2.LampReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnOff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lamp/TurnOff',
            atuadores__def__pb2.Void.SerializeToString,
            atuadores__def__pb2.LampReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lamp/ChangeColor',
            atuadores__def__pb2.Color.SerializeToString,
            atuadores__def__pb2.LampReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RetractableRoofStub(object):
    """RetractableRoof
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Notify = channel.unary_unary(
                '/RetractableRoof/Notify',
                request_serializer=atuadores__def__pb2.RainPresence.SerializeToString,
                response_deserializer=atuadores__def__pb2.RetractableRoofReply.FromString,
                )
        self.Open = channel.unary_unary(
                '/RetractableRoof/Open',
                request_serializer=atuadores__def__pb2.Void.SerializeToString,
                response_deserializer=atuadores__def__pb2.RetractableRoofReply.FromString,
                )
        self.Close = channel.unary_unary(
                '/RetractableRoof/Close',
                request_serializer=atuadores__def__pb2.Void.SerializeToString,
                response_deserializer=atuadores__def__pb2.RetractableRoofReply.FromString,
                )


class RetractableRoofServicer(object):
    """RetractableRoof
    """

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RetractableRoofServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=atuadores__def__pb2.RainPresence.FromString,
                    response_serializer=atuadores__def__pb2.RetractableRoofReply.SerializeToString,
            ),
            'Open': grpc.unary_unary_rpc_method_handler(
                    servicer.Open,
                    request_deserializer=atuadores__def__pb2.Void.FromString,
                    response_serializer=atuadores__def__pb2.RetractableRoofReply.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=atuadores__def__pb2.Void.FromString,
                    response_serializer=atuadores__def__pb2.RetractableRoofReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RetractableRoof', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RetractableRoof(object):
    """RetractableRoof
    """

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RetractableRoof/Notify',
            atuadores__def__pb2.RainPresence.SerializeToString,
            atuadores__def__pb2.RetractableRoofReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RetractableRoof/Open',
            atuadores__def__pb2.Void.SerializeToString,
            atuadores__def__pb2.RetractableRoofReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RetractableRoof/Close',
            atuadores__def__pb2.Void.SerializeToString,
            atuadores__def__pb2.RetractableRoofReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
